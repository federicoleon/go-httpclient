// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	gohttp "github.com/federicoleon/go-httpclient/gohttp"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ClientBuilder is an autogenerated mock type for the ClientBuilder type
type ClientBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *ClientBuilder) Build() gohttp.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 gohttp.Client
	if rf, ok := ret.Get(0).(func() gohttp.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.Client)
		}
	}

	return r0
}

// DisableTimeouts provides a mock function with given fields: disable
func (_m *ClientBuilder) DisableTimeouts(disable bool) gohttp.ClientBuilder {
	ret := _m.Called(disable)

	if len(ret) == 0 {
		panic("no return value specified for DisableTimeouts")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(bool) gohttp.ClientBuilder); ok {
		r0 = rf(disable)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// SetConnectionTimeout provides a mock function with given fields: timeout
func (_m *ClientBuilder) SetConnectionTimeout(timeout time.Duration) gohttp.ClientBuilder {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for SetConnectionTimeout")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) gohttp.ClientBuilder); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// SetHeaders provides a mock function with given fields: headers
func (_m *ClientBuilder) SetHeaders(headers http.Header) gohttp.ClientBuilder {
	ret := _m.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for SetHeaders")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(http.Header) gohttp.ClientBuilder); ok {
		r0 = rf(headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// SetHttpClient provides a mock function with given fields: c
func (_m *ClientBuilder) SetHttpClient(c *http.Client) gohttp.ClientBuilder {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SetHttpClient")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(*http.Client) gohttp.ClientBuilder); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// SetMaxIdleConnections provides a mock function with given fields: i
func (_m *ClientBuilder) SetMaxIdleConnections(i int) gohttp.ClientBuilder {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for SetMaxIdleConnections")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(int) gohttp.ClientBuilder); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// SetResponseTimeout provides a mock function with given fields: timeout
func (_m *ClientBuilder) SetResponseTimeout(timeout time.Duration) gohttp.ClientBuilder {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for SetResponseTimeout")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(time.Duration) gohttp.ClientBuilder); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// SetUserAgent provides a mock function with given fields: userAgent
func (_m *ClientBuilder) SetUserAgent(userAgent string) gohttp.ClientBuilder {
	ret := _m.Called(userAgent)

	if len(ret) == 0 {
		panic("no return value specified for SetUserAgent")
	}

	var r0 gohttp.ClientBuilder
	if rf, ok := ret.Get(0).(func(string) gohttp.ClientBuilder); ok {
		r0 = rf(userAgent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gohttp.ClientBuilder)
		}
	}

	return r0
}

// NewClientBuilder creates a new instance of ClientBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientBuilder {
	mock := &ClientBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
